{"ast":null,"code":"// Updated handleAddToCart function for CourseDetail.jsx\n// Replace the existing handleAddToCart function with this one\n\nconst handleAddToCart = async () => {\n  try {\n    setIsAddingToCart(true);\n    setCartMessage(\"\");\n\n    // Get token from localStorage (adjust based on how you store auth token)\n    const token = localStorage.getItem('token') || localStorage.getItem('authToken');\n    if (!token) {\n      // Redirect to login page if not authenticated\n      navigate('/login');\n      return;\n    }\n    const response = await axios.post(\"http://localhost:5000/api/cart\", {\n      courseId: course._id\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    setCartMessage(\"Course added to cart successfully!\");\n\n    // Update cart count in navbar\n    if (window.refreshNavbarCartCount) {\n      window.refreshNavbarCartCount();\n    }\n    setTimeout(() => setCartMessage(\"\"), 3000);\n  } catch (err) {\n    var _err$response, _err$response2;\n    console.error(\"Error adding to cart:\", err);\n\n    // Handle specific error cases\n    if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n      setCartMessage(\"Please login to add courses to cart\");\n    } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 409) {\n      setCartMessage(\"Course is already in your cart\");\n    } else {\n      var _err$response3, _err$response3$data;\n      setCartMessage(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || \"Failed to add course to cart\");\n    }\n    setTimeout(() => setCartMessage(\"\"), 3000);\n  } finally {\n    setIsAddingToCart(false);\n  }\n};","map":{"version":3,"names":["handleAddToCart","setIsAddingToCart","setCartMessage","token","localStorage","getItem","navigate","response","axios","post","courseId","course","_id","headers","window","refreshNavbarCartCount","setTimeout","err","_err$response","_err$response2","console","error","status","_err$response3","_err$response3$data","data","message"],"sources":["D:/Edu Project/mern-auth-frontend/src/pages/User/CourseDetail.jsx"],"sourcesContent":["// Updated handleAddToCart function for CourseDetail.jsx\r\n// Replace the existing handleAddToCart function with this one\r\n\r\nconst handleAddToCart = async () => {\r\n    try {\r\n        setIsAddingToCart(true);\r\n        setCartMessage(\"\");\r\n\r\n        // Get token from localStorage (adjust based on how you store auth token)\r\n        const token = localStorage.getItem('token') || localStorage.getItem('authToken');\r\n\r\n        if (!token) {\r\n            // Redirect to login page if not authenticated\r\n            navigate('/login');\r\n            return;\r\n        }\r\n\r\n        const response = await axios.post(\"http://localhost:5000/api/cart\", {\r\n            courseId: course._id\r\n        }, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        setCartMessage(\"Course added to cart successfully!\");\r\n        \r\n        // Update cart count in navbar\r\n        if (window.refreshNavbarCartCount) {\r\n            window.refreshNavbarCartCount();\r\n        }\r\n        \r\n        setTimeout(() => setCartMessage(\"\"), 3000);\r\n\r\n    } catch (err) {\r\n        console.error(\"Error adding to cart:\", err);\r\n\r\n        // Handle specific error cases\r\n        if (err.response?.status === 401) {\r\n            setCartMessage(\"Please login to add courses to cart\");\r\n        } else if (err.response?.status === 409) {\r\n            setCartMessage(\"Course is already in your cart\");\r\n        } else {\r\n            setCartMessage(err.response?.data?.message || \"Failed to add course to cart\");\r\n        }\r\n\r\n        setTimeout(() => setCartMessage(\"\"), 3000);\r\n    } finally {\r\n        setIsAddingToCart(false);\r\n    }\r\n};"],"mappings":"AAAA;AACA;;AAEA,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACAC,iBAAiB,CAAC,IAAI,CAAC;IACvBC,cAAc,CAAC,EAAE,CAAC;;IAElB;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAEhF,IAAI,CAACF,KAAK,EAAE;MACR;MACAG,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACJ;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,gCAAgC,EAAE;MAChEC,QAAQ,EAAEC,MAAM,CAACC;IACrB,CAAC,EAAE;MACCC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUV,KAAK,EAAE;QAClC,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEFD,cAAc,CAAC,oCAAoC,CAAC;;IAEpD;IACA,IAAIY,MAAM,CAACC,sBAAsB,EAAE;MAC/BD,MAAM,CAACC,sBAAsB,CAAC,CAAC;IACnC;IAEAC,UAAU,CAAC,MAAMd,cAAc,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;EAE9C,CAAC,CAAC,OAAOe,GAAG,EAAE;IAAA,IAAAC,aAAA,EAAAC,cAAA;IACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEJ,GAAG,CAAC;;IAE3C;IACA,IAAI,EAAAC,aAAA,GAAAD,GAAG,CAACV,QAAQ,cAAAW,aAAA,uBAAZA,aAAA,CAAcI,MAAM,MAAK,GAAG,EAAE;MAC9BpB,cAAc,CAAC,qCAAqC,CAAC;IACzD,CAAC,MAAM,IAAI,EAAAiB,cAAA,GAAAF,GAAG,CAACV,QAAQ,cAAAY,cAAA,uBAAZA,cAAA,CAAcG,MAAM,MAAK,GAAG,EAAE;MACrCpB,cAAc,CAAC,gCAAgC,CAAC;IACpD,CAAC,MAAM;MAAA,IAAAqB,cAAA,EAAAC,mBAAA;MACHtB,cAAc,CAAC,EAAAqB,cAAA,GAAAN,GAAG,CAACV,QAAQ,cAAAgB,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcE,IAAI,cAAAD,mBAAA,uBAAlBA,mBAAA,CAAoBE,OAAO,KAAI,8BAA8B,CAAC;IACjF;IAEAV,UAAU,CAAC,MAAMd,cAAc,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;EAC9C,CAAC,SAAS;IACND,iBAAiB,CAAC,KAAK,CAAC;EAC5B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
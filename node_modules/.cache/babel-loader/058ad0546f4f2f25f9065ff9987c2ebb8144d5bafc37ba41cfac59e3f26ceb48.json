{"ast":null,"code":"require('dotenv').config();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst nodemailer = require('nodemailer');\nconst User = require('./models/User');\nconst crypto = require('crypto');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(cors());\napp.use(express.json());\nmongoose.connect(process.env.MONGO_URI).then(() => console.log('MongoDB Connected')).catch(err => console.log('Mongo Error:', err));\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS\n  }\n});\nconst authenticate = (req, res, next) => {\n  const authHeader = req.headers.authorization;\n  if (!authHeader || !authHeader.startsWith('Bearer ')) return res.status(401).json({\n    message: 'No token provided'\n  });\n  const token = authHeader.split(' ')[1];\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({\n      message: 'Invalid token'\n    });\n  }\n};\n\n// All other user routes are unchanged...\n\n// Admin login route\napp.post('/admin-login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const admin = await User.findOne({\n      email\n    });\n    if (!admin || admin.role !== 'admin') {\n      return res.status(401).json({\n        message: 'Access denied. Not an admin.'\n      });\n    }\n    const isMatch = await bcrypt.compare(password, admin.password);\n    if (!isMatch) {\n      return res.status(401).json({\n        message: 'Invalid password'\n      });\n    }\n    const token = jwt.sign({\n      userId: admin._id,\n      role: 'admin'\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.status(200).json({\n      message: 'Admin login successful',\n      token\n    });\n  } catch (error) {\n    console.error('Admin login error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["require","config","express","mongoose","cors","nodemailer","User","crypto","bcrypt","jwt","app","use","json","connect","process","env","MONGO_URI","then","console","log","catch","err","transporter","createTransport","service","auth","user","EMAIL_USER","pass","EMAIL_PASS","authenticate","req","res","next","authHeader","headers","authorization","startsWith","status","message","token","split","decoded","verify","JWT_SECRET","error","post","email","password","body","admin","findOne","role","isMatch","compare","sign","userId","_id","expiresIn","PORT","listen"],"sources":["D:/MERN AUTH WITH  GMAIL/mern-auth-frontend/src/pages/AdminDashboard.jsx"],"sourcesContent":["require('dotenv').config();\r\n\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst nodemailer = require('nodemailer');\r\nconst User = require('./models/User');\r\nconst crypto = require('crypto');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nmongoose.connect(process.env.MONGO_URI)\r\n    .then(() => console.log('MongoDB Connected'))\r\n    .catch((err) => console.log('Mongo Error:', err));\r\n\r\nconst transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n        user: process.env.EMAIL_USER,\r\n        pass: process.env.EMAIL_PASS,\r\n    },\r\n});\r\n\r\nconst authenticate = (req, res, next) => {\r\n    const authHeader = req.headers.authorization;\r\n    if (!authHeader || !authHeader.startsWith('Bearer '))\r\n        return res.status(401).json({ message: 'No token provided' });\r\n\r\n    const token = authHeader.split(' ')[1];\r\n\r\n    try {\r\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n        req.user = decoded;\r\n        next();\r\n    } catch (error) {\r\n        return res.status(401).json({ message: 'Invalid token' });\r\n    }\r\n};\r\n\r\n// All other user routes are unchanged...\r\n\r\n// Admin login route\r\napp.post('/admin-login', async (req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n        const admin = await User.findOne({ email });\r\n\r\n        if (!admin || admin.role !== 'admin') {\r\n            return res.status(401).json({ message: 'Access denied. Not an admin.' });\r\n        }\r\n\r\n        const isMatch = await bcrypt.compare(password, admin.password);\r\n        if (!isMatch) {\r\n            return res.status(401).json({ message: 'Invalid password' });\r\n        }\r\n\r\n        const token = jwt.sign(\r\n            { userId: admin._id, role: 'admin' },\r\n            process.env.JWT_SECRET,\r\n            { expiresIn: '1h' }\r\n        );\r\n\r\n        res.status(200).json({ message: 'Admin login successful', token });\r\n    } catch (error) {\r\n        console.error('Admin login error:', error);\r\n        res.status(500).json({ message: 'Server error' });\r\n    }\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n    console.log(`Server running on port ${PORT}`);\r\n});\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}